// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: reset_pass.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteResetToken = `-- name: DeleteResetToken :exec
DELETE FROM password_reset_tokens WHERE token = $1
`

func (q *Queries) DeleteResetToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteResetToken, token)
	return err
}

const getUserByResetToken = `-- name: GetUserByResetToken :one
SELECT user_id, expiry FROM password_reset_tokens WHERE token = $1 AND expiry > now()
`

type GetUserByResetTokenRow struct {
	UserID uuid.UUID
	Expiry time.Time
}

func (q *Queries) GetUserByResetToken(ctx context.Context, token string) (GetUserByResetTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByResetToken, token)
	var i GetUserByResetTokenRow
	err := row.Scan(&i.UserID, &i.Expiry)
	return i, err
}

const storeResetToken = `-- name: StoreResetToken :exec
INSERT INTO password_reset_tokens (user_id, token, expiry)
VALUES ($1, $2, $3)
`

type StoreResetTokenParams struct {
	UserID uuid.UUID
	Token  string
	Expiry time.Time
}

func (q *Queries) StoreResetToken(ctx context.Context, arg StoreResetTokenParams) error {
	_, err := q.db.ExecContext(ctx, storeResetToken, arg.UserID, arg.Token, arg.Expiry)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET hashed_password = $1 WHERE id = $2
`

type UpdateUserPasswordParams struct {
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.HashedPassword, arg.ID)
	return err
}
