// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: url.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (user_id, url, short_url)
VALUES ($1, $2, $3)
RETURNING id, user_id, url, short_url, total_clicks, daily_clicks, last_clicked, created_at, updated_at
`

type CreateURLParams struct {
	UserID   uuid.UUID
	Url      string
	ShortUrl string
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL, arg.UserID, arg.Url, arg.ShortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.ShortUrl,
		&i.TotalClicks,
		&i.DailyClicks,
		&i.LastClicked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls WHERE short_url = $1
`

func (q *Queries) DeleteURL(ctx context.Context, shortUrl string) error {
	_, err := q.db.ExecContext(ctx, deleteURL, shortUrl)
	return err
}

const getURLAnalytics = `-- name: GetURLAnalytics :one
SELECT total_clicks, daily_clicks, last_clicked 
FROM urls 
WHERE short_url = $1
`

type GetURLAnalyticsRow struct {
	TotalClicks sql.NullInt32
	DailyClicks sql.NullInt32
	LastClicked sql.NullTime
}

func (q *Queries) GetURLAnalytics(ctx context.Context, shortUrl string) (GetURLAnalyticsRow, error) {
	row := q.db.QueryRowContext(ctx, getURLAnalytics, shortUrl)
	var i GetURLAnalyticsRow
	err := row.Scan(&i.TotalClicks, &i.DailyClicks, &i.LastClicked)
	return i, err
}

const getURLByID = `-- name: GetURLByID :one
SELECT id, url, short_url, created_at, updated_at
FROM urls
WHERE id = $1
`

type GetURLByIDRow struct {
	ID        uuid.UUID
	Url       string
	ShortUrl  string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetURLByID(ctx context.Context, id uuid.UUID) (GetURLByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getURLByID, id)
	var i GetURLByIDRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.ShortUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getURLByShortURL = `-- name: GetURLByShortURL :one
SELECT url FROM urls WHERE short_url = $1
`

func (q *Queries) GetURLByShortURL(ctx context.Context, shortUrl string) (string, error) {
	row := q.db.QueryRowContext(ctx, getURLByShortURL, shortUrl)
	var url string
	err := row.Scan(&url)
	return url, err
}

const getURLsByUserID = `-- name: GetURLsByUserID :many
SELECT id, url, short_url, created_at, updated_at 
FROM urls 
WHERE user_id = $1
`

type GetURLsByUserIDRow struct {
	ID        uuid.UUID
	Url       string
	ShortUrl  string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetURLsByUserID(ctx context.Context, userID uuid.UUID) ([]GetURLsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getURLsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetURLsByUserIDRow
	for rows.Next() {
		var i GetURLsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.ShortUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserIDByShortURL = `-- name: GetUserIDByShortURL :one
SELECT user_id FROM urls WHERE short_url = $1
`

func (q *Queries) GetUserIDByShortURL(ctx context.Context, shortUrl string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByShortURL, shortUrl)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const incrementURLClicks = `-- name: IncrementURLClicks :exec
UPDATE urls
SET total_clicks = total_clicks + 1,
    daily_clicks = daily_clicks + 1, 
    last_clicked = now()
WHERE short_url = $1
`

func (q *Queries) IncrementURLClicks(ctx context.Context, shortUrl string) error {
	_, err := q.db.ExecContext(ctx, incrementURLClicks, shortUrl)
	return err
}

const resetDailyClicks = `-- name: ResetDailyClicks :exec
UPDATE urls 
SET daily_clicks = 0
`

func (q *Queries) ResetDailyClicks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetDailyClicks)
	return err
}

const slugExists = `-- name: SlugExists :one
SELECT EXISTS(SELECT 1 FROM urls WHERE short_url = $1)
`

func (q *Queries) SlugExists(ctx context.Context, shortUrl string) (bool, error) {
	row := q.db.QueryRowContext(ctx, slugExists, shortUrl)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateShortURL = `-- name: UpdateShortURL :one
UPDATE urls 
SET 
    url = COALESCE(NULLIF($1, ''), url), 
    short_url = COALESCE(NULLIF($2, ''), short_url), 
    updated_at = now()
WHERE id = $3
RETURNING id, user_id, url, short_url, total_clicks, daily_clicks, last_clicked, created_at, updated_at
`

type UpdateShortURLParams struct {
	Column1 interface{}
	Column2 interface{}
	ID      uuid.UUID
}

func (q *Queries) UpdateShortURL(ctx context.Context, arg UpdateShortURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, updateShortURL, arg.Column1, arg.Column2, arg.ID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.ShortUrl,
		&i.TotalClicks,
		&i.DailyClicks,
		&i.LastClicked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
