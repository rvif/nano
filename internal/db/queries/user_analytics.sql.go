// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_analytics.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createAnalytics = `-- name: CreateAnalytics :one
INSERT INTO user_analytics (id, user_id, total_urls, total_total_clicks, avg_daily_clicks, created_at, updated_at)
VALUES ($1, $2, 0, 0, 0, NOW(), NOW())
RETURNING id, user_id, total_urls, total_total_clicks, avg_daily_clicks, created_at, updated_at
`

type CreateAnalyticsParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) CreateAnalytics(ctx context.Context, arg CreateAnalyticsParams) (UserAnalytic, error) {
	row := q.db.QueryRowContext(ctx, createAnalytics, arg.ID, arg.UserID)
	var i UserAnalytic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalUrls,
		&i.TotalTotalClicks,
		&i.AvgDailyClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnalyticsByUserId = `-- name: GetAnalyticsByUserId :one
SELECT id, user_id, total_urls, total_total_clicks, avg_daily_clicks, created_at, updated_at
FROM user_analytics 
WHERE user_id = $1
`

func (q *Queries) GetAnalyticsByUserId(ctx context.Context, userID uuid.UUID) (UserAnalytic, error) {
	row := q.db.QueryRowContext(ctx, getAnalyticsByUserId, userID)
	var i UserAnalytic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalUrls,
		&i.TotalTotalClicks,
		&i.AvgDailyClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAnalytics = `-- name: UpdateAnalytics :one
UPDATE user_analytics
SET 
    total_urls = total_urls + $1, 
    total_total_clicks = total_total_clicks + $2, 
    avg_daily_clicks = total_total_clicks + $2 / GREATEST(EXTRACT(EPOCH FROM NOW() - created_at) / 86400, 1), 
    updated_at = now()
WHERE user_id = $3
RETURNING id, user_id, total_urls, total_total_clicks, avg_daily_clicks, created_at, updated_at
`

type UpdateAnalyticsParams struct {
	TotalUrls        int32
	TotalTotalClicks int32
	UserID           uuid.UUID
}

func (q *Queries) UpdateAnalytics(ctx context.Context, arg UpdateAnalyticsParams) (UserAnalytic, error) {
	row := q.db.QueryRowContext(ctx, updateAnalytics, arg.TotalUrls, arg.TotalTotalClicks, arg.UserID)
	var i UserAnalytic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalUrls,
		&i.TotalTotalClicks,
		&i.AvgDailyClicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
